// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	resources "woman-center-be/internal/web/resources/v1"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// TransactionPaymentService is an autogenerated mock type for the TransactionPaymentService type
type TransactionPaymentService struct {
	mock.Mock
}

// TransactionPaymentService provides a mock function with given fields: orderId, paymentCode
func (_m *TransactionPaymentService) TransactionPaymentService(orderId uuid.UUID, paymentCode string) (*resources.MidtransInvoice, error) {
	ret := _m.Called(orderId, paymentCode)

	var r0 *resources.MidtransInvoice
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (*resources.MidtransInvoice, error)); ok {
		return rf(orderId, paymentCode)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) *resources.MidtransInvoice); ok {
		r0 = rf(orderId, paymentCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.MidtransInvoice)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(orderId, paymentCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionPaymentService creates a new instance of TransactionPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionPaymentService {
	mock := &TransactionPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
