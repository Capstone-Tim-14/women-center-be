// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// AddCounselorFavorite provides a mock function with given fields: ctx, id
func (_m *UserService) AddCounselorFavorite(ctx echo.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddFavoriteArticle provides a mock function with given fields: ctx, slug
func (_m *UserService) AddFavoriteArticle(ctx echo.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AllFavoriteArticle provides a mock function with given fields: ctx
func (_m *UserService) AllFavoriteArticle(ctx echo.Context) (*domain.Users, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*domain.Users, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *domain.Users); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFavoriteArticle provides a mock function with given fields: ctx, slug
func (_m *UserService) DeleteFavoriteArticle(ctx echo.Context, slug string) error {
	ret := _m.Called(ctx, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCounselorFavorite provides a mock function with given fields: ctx
func (_m *UserService) GetCounselorFavorite(ctx echo.Context) (*domain.Users, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*domain.Users, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *domain.Users); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx
func (_m *UserService) GetUserProfile(ctx echo.Context) (*domain.Users, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*domain.Users, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *domain.Users); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, request
func (_m *UserService) RegisterUser(ctx echo.Context, request requests.UserRequest) (*domain.Users, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.Users
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UserRequest) (*domain.Users, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UserRequest) *domain.Users); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.UserRequest) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.UserRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveCounselorFavorite provides a mock function with given fields: ctx, id
func (_m *UserService) RemoveCounselorFavorite(ctx echo.Context, id int) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, request, picture
func (_m *UserService) UpdateUser(ctx echo.Context, request requests.UpdateUserProfileRequest, picture *multipart.FileHeader) (*domain.Users, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, picture)

	var r0 *domain.Users
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) (*domain.Users, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, picture)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) *domain.Users); ok {
		r0 = rf(ctx, request, picture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, picture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, picture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUserProfile provides a mock function with given fields: ctx, request, picture
func (_m *UserService) UpdateUserProfile(ctx echo.Context, request requests.UpdateUserProfileRequest, picture *multipart.FileHeader) (*domain.Users, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, picture)

	var r0 *domain.Users
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) (*domain.Users, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, picture)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) *domain.Users); ok {
		r0 = rf(ctx, request, picture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, picture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.UpdateUserProfileRequest, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, picture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserDetail provides a mock function with given fields: id
func (_m *UserService) UserDetail(id uint) (*resources.UserResource, error) {
	ret := _m.Called(id)

	var r0 *resources.UserResource
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*resources.UserResource, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *resources.UserResource); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.UserResource)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersList provides a mock function with given fields:
func (_m *UserService) UsersList() ([]resources.UserResource, error) {
	ret := _m.Called()

	var r0 []resources.UserResource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]resources.UserResource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []resources.UserResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resources.UserResource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
