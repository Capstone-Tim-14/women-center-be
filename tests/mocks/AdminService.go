// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"
)

// AdminService is an autogenerated mock type for the AdminService type
type AdminService struct {
	mock.Mock
}

// RegisterAdmin provides a mock function with given fields: ctx, request
func (_m *AdminService) RegisterAdmin(ctx echo.Context, request requests.AdminRequest) (*domain.Admin, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.Admin
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.AdminRequest) (*domain.Admin, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.AdminRequest) *domain.Admin); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.AdminRequest) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.AdminRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAdminService creates a new instance of AdminService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminService {
	mock := &AdminService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
