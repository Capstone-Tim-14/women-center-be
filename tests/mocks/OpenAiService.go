// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// OpenAiService is an autogenerated mock type for the OpenAiService type
type OpenAiService struct {
	mock.Mock
}

// EmbeddedPromptByDataCareer provides a mock function with given fields: careers
func (_m *OpenAiService) EmbeddedPromptByDataCareer(careers []domain.Career) string {
	ret := _m.Called(careers)

	var r0 string
	if rf, ok := ret.Get(0).(func([]domain.Career) string); ok {
		r0 = rf(careers)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateMessage provides a mock function with given fields: ctx, prompt, question
func (_m *OpenAiService) GenerateMessage(ctx echo.Context, prompt string, question string) string {
	ret := _m.Called(ctx, prompt, question)

	var r0 string
	if rf, ok := ret.Get(0).(func(echo.Context, string, string) string); ok {
		r0 = rf(ctx, prompt, question)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewOpenAiService creates a new instance of OpenAiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAiService {
	mock := &OpenAiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
