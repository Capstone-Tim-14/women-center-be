// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	requests "woman-center-be/internal/web/requests/v1"
)

// CareerService is an autogenerated mock type for the CareerService type
type CareerService struct {
	mock.Mock
}

// AddJobType provides a mock function with given fields: ctx, id, request
func (_m *CareerService) AddJobType(ctx echo.Context, id int, request requests.CareerhasTypeRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CareerhasTypeRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CareerhasTypeRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.CareerhasTypeRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCareer provides a mock function with given fields: ctx, request, logo, cover
func (_m *CareerService) CreateCareer(ctx echo.Context, request requests.CareerRequest, logo *multipart.FileHeader, cover *multipart.FileHeader) (*domain.Career, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, logo, cover)

	var r0 *domain.Career
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) (*domain.Career, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, logo, cover)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) *domain.Career); ok {
		r0 = rf(ctx, request, logo, cover)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, logo, cover)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, logo, cover)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteCareer provides a mock function with given fields: ctx
func (_m *CareerService) DeleteCareer(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllCareer provides a mock function with given fields: ctx
func (_m *CareerService) FindAllCareer(ctx echo.Context) ([]domain.Career, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Career, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Career); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCareerByid provides a mock function with given fields: ctx, id
func (_m *CareerService) FindCareerByid(ctx echo.Context, id int) (*domain.Career, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) (*domain.Career, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int) *domain.Career); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecomendationCareerList provides a mock function with given fields: ctx
func (_m *CareerService) RecomendationCareerList(ctx echo.Context) ([]domain.Career, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Career, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Career); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecomendationCareerListForMobile provides a mock function with given fields: ctx
func (_m *CareerService) RecomendationCareerListForMobile(ctx echo.Context) ([]domain.Career, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Career, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Career); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveJobType provides a mock function with given fields: ctx, id, request
func (_m *CareerService) RemoveJobType(ctx echo.Context, id int, request requests.CareerhasManyRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CareerhasManyRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CareerhasManyRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.CareerhasManyRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCareer provides a mock function with given fields: ctx, request, logo, cover
func (_m *CareerService) UpdateCareer(ctx echo.Context, request requests.CareerRequest, logo *multipart.FileHeader, cover *multipart.FileHeader) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, logo, cover)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, logo, cover)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, request, logo, cover)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.CareerRequest, *multipart.FileHeader, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, request, logo, cover)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecomendationCareer provides a mock function with given fields: ctx
func (_m *CareerService) UpdateRecomendationCareer(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCareerService creates a new instance of CareerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCareerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CareerService {
	mock := &CareerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
