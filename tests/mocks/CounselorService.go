// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// CounselorService is an autogenerated mock type for the CounselorService type
type CounselorService struct {
	mock.Mock
}

// AddSpecialist provides a mock function with given fields: ctx, id, request
func (_m *CounselorService) AddSpecialist(ctx echo.Context, id uint, request requests.CounselorHasManyRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, uint, requests.CounselorHasManyRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, uint, requests.CounselorHasManyRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, uint, requests.CounselorHasManyRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCounselors provides a mock function with given fields: ctx
func (_m *CounselorService) GetAllCounselors(ctx echo.Context) ([]domain.Counselors, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Counselors, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Counselors); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounselorProfile provides a mock function with given fields: ctx
func (_m *CounselorService) GetCounselorProfile(ctx echo.Context) (*domain.Counselors, error) {
	ret := _m.Called(ctx)

	var r0 *domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*domain.Counselors, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *domain.Counselors); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounselorsForMobile provides a mock function with given fields: ctx
func (_m *CounselorService) GetCounselorsForMobile(ctx echo.Context) ([]domain.Counselors, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Counselors, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Counselors); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailCounselor provides a mock function with given fields: ctx
func (_m *CounselorService) GetDetailCounselor(ctx echo.Context) (*resources.DetailCounselor, error) {
	ret := _m.Called(ctx)

	var r0 *resources.DetailCounselor
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.DetailCounselor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.DetailCounselor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.DetailCounselor)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailCounselorOnly provides a mock function with given fields: ctx
func (_m *CounselorService) GetDetailCounselorOnly(ctx echo.Context) (*resources.DetailCounselor, error) {
	ret := _m.Called(ctx)

	var r0 *resources.DetailCounselor
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.DetailCounselor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.DetailCounselor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.DetailCounselor)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCounselor provides a mock function with given fields: ctx, request
func (_m *CounselorService) RegisterCounselor(ctx echo.Context, request requests.CounselorRequest) (*domain.Counselors, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request)

	var r0 *domain.Counselors
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CounselorRequest) (*domain.Counselors, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.CounselorRequest) *domain.Counselors); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.CounselorRequest) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.CounselorRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveSpecialistCounselor provides a mock function with given fields: ctx, id, request
func (_m *CounselorService) RemoveSpecialistCounselor(ctx echo.Context, id int, request requests.CounselorHasManyRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CounselorHasManyRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.CounselorHasManyRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.CounselorHasManyRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCounselor provides a mock function with given fields: ctx, request, picture
func (_m *CounselorService) UpdateCounselor(ctx echo.Context, request requests.UpdateCounselorProfileRequest, picture *multipart.FileHeader) (*domain.Counselors, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, picture)

	var r0 *domain.Counselors
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateCounselorProfileRequest, *multipart.FileHeader) (*domain.Counselors, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, picture)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateCounselorProfileRequest, *multipart.FileHeader) *domain.Counselors); ok {
		r0 = rf(ctx, request, picture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.UpdateCounselorProfileRequest, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, picture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.UpdateCounselorProfileRequest, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, picture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCounselorForMobile provides a mock function with given fields: ctx, request, picture
func (_m *CounselorService) UpdateCounselorForMobile(ctx echo.Context, request requests.UpdateCounselorProfileRequestForMobile, picture *multipart.FileHeader) (*domain.Counselors, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, picture)

	var r0 *domain.Counselors
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateCounselorProfileRequestForMobile, *multipart.FileHeader) (*domain.Counselors, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, picture)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.UpdateCounselorProfileRequestForMobile, *multipart.FileHeader) *domain.Counselors); ok {
		r0 = rf(ctx, request, picture)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.UpdateCounselorProfileRequestForMobile, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, picture)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.UpdateCounselorProfileRequestForMobile, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, picture)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCounselorService creates a new instance of CounselorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselorService {
	mock := &CounselorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
