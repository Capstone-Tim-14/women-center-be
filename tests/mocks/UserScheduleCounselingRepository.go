// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"
)

// UserScheduleCounselingRepository is an autogenerated mock type for the UserScheduleCounselingRepository type
type UserScheduleCounselingRepository struct {
	mock.Mock
}

// CreateUserScheduling provides a mock function with given fields: user, request
func (_m *UserScheduleCounselingRepository) CreateUserScheduling(user domain.Users, request domain.UserScheduleCounseling) (*domain.UserScheduleCounseling, error) {
	ret := _m.Called(user, request)

	var r0 *domain.UserScheduleCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Users, domain.UserScheduleCounseling) (*domain.UserScheduleCounseling, error)); ok {
		return rf(user, request)
	}
	if rf, ok := ret.Get(0).(func(domain.Users, domain.UserScheduleCounseling) *domain.UserScheduleCounseling); ok {
		r0 = rf(user, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserScheduleCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Users, domain.UserScheduleCounseling) error); ok {
		r1 = rf(user, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindScheduleByDateAndTimeExist provides a mock function with given fields: request
func (_m *UserScheduleCounselingRepository) FindScheduleByDateAndTimeExist(request requests.UserScheduleCounselingQueryRequest) (bool, error) {
	ret := _m.Called(request)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.UserScheduleCounselingQueryRequest) (bool, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(requests.UserScheduleCounselingQueryRequest) bool); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(requests.UserScheduleCounselingQueryRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMultipleScheduleBooked provides a mock function with given fields: schedules, booking_detail_id
func (_m *UserScheduleCounselingRepository) UpdateMultipleScheduleBooked(schedules []domain.UserScheduleCounseling, booking_detail_id uint) error {
	ret := _m.Called(schedules, booking_detail_id)

	var r0 error
	if rf, ok := ret.Get(0).(func([]domain.UserScheduleCounseling, uint) error); ok {
		r0 = rf(schedules, booking_detail_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserScheduleCounselingRepository creates a new instance of UserScheduleCounselingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserScheduleCounselingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserScheduleCounselingRepository {
	mock := &UserScheduleCounselingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
