// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *domain.Users) (*domain.Users, error) {
	ret := _m.Called(user)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Users) (*domain.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.Users) *domain.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *UserRepository) FindByID(id int) (*domain.Users, error) {
	ret := _m.Called(id)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Users, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Users); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindyByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindyByEmail(email string) (*domain.Users, error) {
	ret := _m.Called(email)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Users, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Users); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields:
func (_m *UserRepository) GetAllUsers() ([]domain.Users, error) {
	ret := _m.Called()

	var r0 []domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Users, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOTP provides a mock function with given fields: user, secret
func (_m *UserRepository) UpdateOTP(user *domain.Users, secret string) error {
	ret := _m.Called(user, secret)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Users, string) error); ok {
		r0 = rf(user, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserRepository) UpdateUser(user *domain.Users) (*domain.Users, error) {
	ret := _m.Called(user)

	var r0 *domain.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Users) (*domain.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.Users) *domain.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
