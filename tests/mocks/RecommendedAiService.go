// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	exceptions "woman-center-be/utils/exceptions"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// RecommendedAiService is an autogenerated mock type for the RecommendedAiService type
type RecommendedAiService struct {
	mock.Mock
}

// GetAllHistoryRecommendationCareer provides a mock function with given fields: ctx
func (_m *RecommendedAiService) GetAllHistoryRecommendationCareer(ctx echo.Context) (*resources.HistoryRecommendationCareerAiResource, error) {
	ret := _m.Called(ctx)

	var r0 *resources.HistoryRecommendationCareerAiResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.HistoryRecommendationCareerAiResource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.HistoryRecommendationCareerAiResource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.HistoryRecommendationCareerAiResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedCareers provides a mock function with given fields: ctx, message
func (_m *RecommendedAiService) GetRecommendedCareers(ctx echo.Context, message string) string {
	ret := _m.Called(ctx, message)

	var r0 string
	if rf, ok := ret.Get(0).(func(echo.Context, string) string); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SaveGenerateRecommendationCareer provides a mock function with given fields: ctx, request
func (_m *RecommendedAiService) SaveGenerateRecommendationCareer(ctx echo.Context, request requests.ChatRecomendedRequest) (*resources.GenerateRecommendationCareerResource, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request)

	var r0 *resources.GenerateRecommendationCareerResource
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ChatRecomendedRequest) (*resources.GenerateRecommendationCareerResource, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ChatRecomendedRequest) *resources.GenerateRecommendationCareerResource); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.GenerateRecommendationCareerResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.ChatRecomendedRequest) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.ChatRecomendedRequest) error); ok {
		r2 = rf(ctx, request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRecommendedAiService creates a new instance of RecommendedAiService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecommendedAiService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecommendedAiService {
	mock := &RecommendedAiService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
