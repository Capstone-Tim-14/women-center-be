// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// BookingService is an autogenerated mock type for the BookingService type
type BookingService struct {
	mock.Mock
}

// CreateBookingCounseling provides a mock function with given fields: _a0, ctx
func (_m *BookingService) CreateBookingCounseling(_a0 []requests.BookingCounselingRequest, ctx echo.Context) ([]exceptions.ValidationMessage, error, *resources.BookingCounselingResource) {
	ret := _m.Called(_a0, ctx)

	var r0 []exceptions.ValidationMessage
	var r1 error
	var r2 *resources.BookingCounselingResource
	if rf, ok := ret.Get(0).(func([]requests.BookingCounselingRequest, echo.Context) ([]exceptions.ValidationMessage, error, *resources.BookingCounselingResource)); ok {
		return rf(_a0, ctx)
	}
	if rf, ok := ret.Get(0).(func([]requests.BookingCounselingRequest, echo.Context) []exceptions.ValidationMessage); ok {
		r0 = rf(_a0, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func([]requests.BookingCounselingRequest, echo.Context) error); ok {
		r1 = rf(_a0, ctx)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func([]requests.BookingCounselingRequest, echo.Context) *resources.BookingCounselingResource); ok {
		r2 = rf(_a0, ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*resources.BookingCounselingResource)
		}
	}

	return r0, r1, r2
}

// CreateUserScheduleBooking provides a mock function with given fields: request, counselor, userAuth
func (_m *BookingService) CreateUserScheduleBooking(request requests.BookingCounselingRequest, counselor *domain.Counselors, userAuth *domain.Users) (*domain.UserScheduleCounseling, error) {
	ret := _m.Called(request, counselor, userAuth)

	var r0 *domain.UserScheduleCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.BookingCounselingRequest, *domain.Counselors, *domain.Users) (*domain.UserScheduleCounseling, error)); ok {
		return rf(request, counselor, userAuth)
	}
	if rf, ok := ret.Get(0).(func(requests.BookingCounselingRequest, *domain.Counselors, *domain.Users) *domain.UserScheduleCounseling); ok {
		r0 = rf(request, counselor, userAuth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserScheduleCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.BookingCounselingRequest, *domain.Counselors, *domain.Users) error); ok {
		r1 = rf(request, counselor, userAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLoginAndCounselorData provides a mock function with given fields: ctx, counselor_id
func (_m *BookingService) GetUserLoginAndCounselorData(ctx echo.Context, counselor_id int) (*domain.Counselors, *domain.Users, error) {
	ret := _m.Called(ctx, counselor_id)

	var r0 *domain.Counselors
	var r1 *domain.Users
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, int) (*domain.Counselors, *domain.Users, error)); ok {
		return rf(ctx, counselor_id)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int) *domain.Counselors); ok {
		r0 = rf(ctx, counselor_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int) *domain.Users); ok {
		r1 = rf(ctx, counselor_id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Users)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, int) error); ok {
		r2 = rf(ctx, counselor_id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListBookings provides a mock function with given fields: ctx
func (_m *BookingService) ListBookings(ctx echo.Context) ([]resources.BookingCounselingResource, error) {
	ret := _m.Called(ctx)

	var r0 []resources.BookingCounselingResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]resources.BookingCounselingResource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []resources.BookingCounselingResource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resources.BookingCounselingResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusBooking provides a mock function with given fields: orderId, status
func (_m *BookingService) UpdateStatusBooking(orderId string, status string) (bool, error) {
	ret := _m.Called(orderId, status)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(orderId, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(orderId, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(orderId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookingService creates a new instance of BookingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingService {
	mock := &BookingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
