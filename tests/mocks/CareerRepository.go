// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"
)

// CareerRepository is an autogenerated mock type for the CareerRepository type
type CareerRepository struct {
	mock.Mock
}

// CreateCareer provides a mock function with given fields: career
func (_m *CareerRepository) CreateCareer(career *domain.Career) (*domain.Career, error) {
	ret := _m.Called(career)

	var r0 *domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Career) (*domain.Career, error)); ok {
		return rf(career)
	}
	if rf, ok := ret.Get(0).(func(*domain.Career) *domain.Career); ok {
		r0 = rf(career)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Career) error); ok {
		r1 = rf(career)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCareerById provides a mock function with given fields: id
func (_m *CareerRepository) DeleteCareerById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCareerByid provides a mock function with given fields: id
func (_m *CareerRepository) FindCareerByid(id int) (*domain.Career, error) {
	ret := _m.Called(id)

	var r0 *domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Career, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Career); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCareer provides a mock function with given fields: job
func (_m *CareerRepository) GetAllCareer(job requests.CareerFilterRequest) ([]domain.Career, error) {
	ret := _m.Called(job)

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.CareerFilterRequest) ([]domain.Career, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(requests.CareerFilterRequest) []domain.Career); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.CareerFilterRequest) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCareerNoFilter provides a mock function with given fields:
func (_m *CareerRepository) GetAllCareerNoFilter() ([]domain.Career, error) {
	ret := _m.Called()

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Career, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Career); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreloadJobType provides a mock function with given fields: id
func (_m *CareerRepository) PreloadJobType(id uint) (*domain.Career, error) {
	ret := _m.Called(id)

	var r0 *domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Career, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Career); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecomendationCareerList provides a mock function with given fields: job
func (_m *CareerRepository) RecomendationCareerList(job requests.CareerFilterRequest) ([]domain.Career, error) {
	ret := _m.Called(job)

	var r0 []domain.Career
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.CareerFilterRequest) ([]domain.Career, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(requests.CareerFilterRequest) []domain.Career); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Career)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.CareerFilterRequest) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCareerById provides a mock function with given fields: id, career
func (_m *CareerRepository) UpdateCareerById(id int, career *domain.Career) error {
	ret := _m.Called(id, career)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Career) error); ok {
		r0 = rf(id, career)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecomendationCareer provides a mock function with given fields: status, career
func (_m *CareerRepository) UpdateRecomendationCareer(status bool, career *domain.Career) error {
	ret := _m.Called(status, career)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, *domain.Career) error); ok {
		r0 = rf(status, career)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCareerRepository creates a new instance of CareerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCareerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CareerRepository {
	mock := &CareerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
