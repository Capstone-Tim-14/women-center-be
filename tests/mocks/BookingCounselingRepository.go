// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// BookingCounselingRepository is an autogenerated mock type for the BookingCounselingRepository type
type BookingCounselingRepository struct {
	mock.Mock
}

// CreateBooking provides a mock function with given fields: booking
func (_m *BookingCounselingRepository) CreateBooking(booking *domain.BookingCounseling) (*domain.BookingCounseling, error) {
	ret := _m.Called(booking)

	var r0 *domain.BookingCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.BookingCounseling) (*domain.BookingCounseling, error)); ok {
		return rf(booking)
	}
	if rf, ok := ret.Get(0).(func(*domain.BookingCounseling) *domain.BookingCounseling); ok {
		r0 = rf(booking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BookingCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.BookingCounseling) error); ok {
		r1 = rf(booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOrderId provides a mock function with given fields: orderId
func (_m *BookingCounselingRepository) FindByOrderId(orderId uuid.UUID) (*domain.BookingCounseling, error) {
	ret := _m.Called(orderId)

	var r0 *domain.BookingCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*domain.BookingCounseling, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.BookingCounseling); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BookingCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingCounselingDetail provides a mock function with given fields: counselor_id, orderId
func (_m *BookingCounselingRepository) GetBookingCounselingDetail(counselor_id uint, orderId uuid.UUID) (*domain.CounselingSessionDetail, []domain.CounselingScheduleSession, error) {
	ret := _m.Called(counselor_id, orderId)

	var r0 *domain.CounselingSessionDetail
	var r1 []domain.CounselingScheduleSession
	var r2 error
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) (*domain.CounselingSessionDetail, []domain.CounselingScheduleSession, error)); ok {
		return rf(counselor_id, orderId)
	}
	if rf, ok := ret.Get(0).(func(uint, uuid.UUID) *domain.CounselingSessionDetail); ok {
		r0 = rf(counselor_id, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CounselingSessionDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uuid.UUID) []domain.CounselingScheduleSession); ok {
		r1 = rf(counselor_id, orderId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]domain.CounselingScheduleSession)
		}
	}

	if rf, ok := ret.Get(2).(func(uint, uuid.UUID) error); ok {
		r2 = rf(counselor_id, orderId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBookingListByCounselor provides a mock function with given fields: counselor_id
func (_m *BookingCounselingRepository) GetBookingListByCounselor(counselor_id uint) ([]domain.CounselingSession, error) {
	ret := _m.Called(counselor_id)

	var r0 []domain.CounselingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.CounselingSession, error)); ok {
		return rf(counselor_id)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.CounselingSession); ok {
		r0 = rf(counselor_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CounselingSession)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(counselor_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookingListByUser provides a mock function with given fields: id
func (_m *BookingCounselingRepository) GetBookingListByUser(id uint) ([]domain.BookingCounseling, error) {
	ret := _m.Called(id)

	var r0 []domain.BookingCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]domain.BookingCounseling, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []domain.BookingCounseling); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.BookingCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusBooking provides a mock function with given fields: orderId, status
func (_m *BookingCounselingRepository) UpdateStatusBooking(orderId uuid.UUID, status string) (bool, error) {
	ret := _m.Called(orderId, status)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) (bool, error)); ok {
		return rf(orderId, status)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string) bool); ok {
		r0 = rf(orderId, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string) error); ok {
		r1 = rf(orderId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookingCounselingRepository creates a new instance of BookingCounselingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingCounselingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingCounselingRepository {
	mock := &BookingCounselingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
