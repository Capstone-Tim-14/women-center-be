// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	exceptions "woman-center-be/utils/exceptions"

	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// AdminAuthentication provides a mock function with given fields: _a0, _a1
func (_m *AuthService) AdminAuthentication(_a0 requests.AuthRequest, _a1 echo.Context) (*resources.AuthTokenResource, []exceptions.ValidationMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resources.AuthTokenResource
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(requests.AuthRequest, echo.Context) (*resources.AuthTokenResource, []exceptions.ValidationMessage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(requests.AuthRequest, echo.Context) *resources.AuthTokenResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.AuthTokenResource)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.AuthRequest, echo.Context) []exceptions.ValidationMessage); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(requests.AuthRequest, echo.Context) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GoogleAuthService provides a mock function with given fields:
func (_m *AuthService) GoogleAuthService() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GoogleCallbackService provides a mock function with given fields: _a0
func (_m *AuthService) GoogleCallbackService(_a0 echo.Context) (*resources.AuthTokenResource, error) {
	ret := _m.Called(_a0)

	var r0 *resources.AuthTokenResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.AuthTokenResource, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.AuthTokenResource); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.AuthTokenResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserAuthentication provides a mock function with given fields: _a0, _a1
func (_m *AuthService) UserAuthentication(_a0 requests.AuthRequest, _a1 echo.Context) (*resources.AuthTokenResource, []exceptions.ValidationMessage, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resources.AuthTokenResource
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(requests.AuthRequest, echo.Context) (*resources.AuthTokenResource, []exceptions.ValidationMessage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(requests.AuthRequest, echo.Context) *resources.AuthTokenResource); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.AuthTokenResource)
		}
	}

	if rf, ok := ret.Get(1).(func(requests.AuthRequest, echo.Context) []exceptions.ValidationMessage); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(requests.AuthRequest, echo.Context) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
