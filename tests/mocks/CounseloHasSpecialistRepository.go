// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// CounseloHasSpecialistRepository is an autogenerated mock type for the CounseloHasSpecialistRepository type
type CounseloHasSpecialistRepository struct {
	mock.Mock
}

// AddSpecialist provides a mock function with given fields: counselor, specialist
func (_m *CounseloHasSpecialistRepository) AddSpecialist(counselor domain.Counselors, specialist *domain.Specialist) error {
	ret := _m.Called(counselor, specialist)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Counselors, *domain.Specialist) error); ok {
		r0 = rf(counselor, specialist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSpecialistById provides a mock function with given fields: counselor, specialist
func (_m *CounseloHasSpecialistRepository) DeleteSpecialistById(counselor domain.Counselors, specialist *domain.Specialist) error {
	ret := _m.Called(counselor, specialist)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Counselors, *domain.Specialist) error); ok {
		r0 = rf(counselor, specialist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveManySpecialist provides a mock function with given fields: counselor, specialist
func (_m *CounseloHasSpecialistRepository) RemoveManySpecialist(counselor domain.Counselors, specialist []domain.Specialist) error {
	ret := _m.Called(counselor, specialist)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Counselors, []domain.Specialist) error); ok {
		r0 = rf(counselor, specialist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCounseloHasSpecialistRepository creates a new instance of CounseloHasSpecialistRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounseloHasSpecialistRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounseloHasSpecialistRepository {
	mock := &CounseloHasSpecialistRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
