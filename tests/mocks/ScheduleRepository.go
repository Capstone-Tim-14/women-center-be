// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ScheduleRepository is an autogenerated mock type for the ScheduleRepository type
type ScheduleRepository struct {
	mock.Mock
}

// CheckDayCounselingScheduleExists provides a mock function with given fields: id, day
func (_m *ScheduleRepository) CheckDayCounselingScheduleExists(id int, day string) (*domain.Counseling_Single_Schedule, error) {
	ret := _m.Called(id, day)

	var r0 *domain.Counseling_Single_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*domain.Counseling_Single_Schedule, error)); ok {
		return rf(id, day)
	}
	if rf, ok := ret.Get(0).(func(int, string) *domain.Counseling_Single_Schedule); ok {
		r0 = rf(id, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counseling_Single_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSchedule provides a mock function with given fields: counselor, scheduling
func (_m *ScheduleRepository) CreateSchedule(counselor *domain.Counselors, scheduling []domain.Counseling_Schedule) error {
	ret := _m.Called(counselor, scheduling)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Counselors, []domain.Counseling_Schedule) error); ok {
		r0 = rf(counselor, scheduling)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteScheduleById provides a mock function with given fields: id
func (_m *ScheduleRepository) DeleteScheduleById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *ScheduleRepository) FindById(id int) (*domain.Counseling_Schedule, error) {
	ret := _m.Called(id)

	var r0 *domain.Counseling_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Counseling_Schedule, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Counseling_Schedule); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counseling_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCounselorDataById provides a mock function with given fields: ScheduleID, CounselorID
func (_m *ScheduleRepository) FindCounselorDataById(ScheduleID int, CounselorID int) (*domain.Counseling_Schedule, error) {
	ret := _m.Called(ScheduleID, CounselorID)

	var r0 *domain.Counseling_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*domain.Counseling_Schedule, error)); ok {
		return rf(ScheduleID, CounselorID)
	}
	if rf, ok := ret.Get(0).(func(int, int) *domain.Counseling_Schedule); ok {
		r0 = rf(ScheduleID, CounselorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counseling_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(ScheduleID, CounselorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStartEndDateCounseling provides a mock function with given fields: counselor_id, day, start, finish
func (_m *ScheduleRepository) FindStartEndDateCounseling(counselor_id int, day string, start time.Time, finish time.Time) (*domain.Counseling_Schedule, error) {
	ret := _m.Called(counselor_id, day, start, finish)

	var r0 *domain.Counseling_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time, time.Time) (*domain.Counseling_Schedule, error)); ok {
		return rf(counselor_id, day, start, finish)
	}
	if rf, ok := ret.Get(0).(func(int, string, time.Time, time.Time) *domain.Counseling_Schedule); ok {
		r0 = rf(counselor_id, day, start, finish)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counseling_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, time.Time, time.Time) error); ok {
		r1 = rf(counselor_id, day, start, finish)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSameDataCounselor provides a mock function with given fields: CounselorID
func (_m *ScheduleRepository) GetSameDataCounselor(CounselorID int) (*[]domain.Counseling_Schedule, error) {
	ret := _m.Called(CounselorID)

	var r0 *[]domain.Counseling_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]domain.Counseling_Schedule, error)); ok {
		return rf(CounselorID)
	}
	if rf, ok := ret.Get(0).(func(int) *[]domain.Counseling_Schedule); ok {
		r0 = rf(CounselorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Counseling_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(CounselorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupingStartTimeAndFinishTimeCounseling provides a mock function with given fields: counselor_id
func (_m *ScheduleRepository) GroupingStartTimeAndFinishTimeCounseling(counselor_id int) ([]domain.Counseling_Schedule, error) {
	ret := _m.Called(counselor_id)

	var r0 []domain.Counseling_Schedule
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Counseling_Schedule, error)); ok {
		return rf(counselor_id)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Counseling_Schedule); ok {
		r0 = rf(counselor_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Counseling_Schedule)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(counselor_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScheduleById provides a mock function with given fields: id, schedule
func (_m *ScheduleRepository) UpdateScheduleById(id int, schedule *domain.Counseling_Schedule) error {
	ret := _m.Called(id, schedule)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Counseling_Schedule) error); ok {
		r0 = rf(id, schedule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewScheduleRepository creates a new instance of ScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScheduleRepository {
	mock := &ScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
