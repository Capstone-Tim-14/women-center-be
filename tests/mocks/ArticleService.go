// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	echo "github.com/labstack/echo/v4"

	exceptions "woman-center-be/utils/exceptions"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	query "woman-center-be/pkg/query"

	requests "woman-center-be/internal/web/requests/v1"

	resources "woman-center-be/internal/web/resources/v1"
)

// ArticleService is an autogenerated mock type for the ArticleService type
type ArticleService struct {
	mock.Mock
}

// AddTagArticle provides a mock function with given fields: ctx, id, request
func (_m *ArticleService) AddTagArticle(ctx echo.Context, id int, request requests.ArticlehasTagRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticlehasTagRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticlehasTagRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.ArticlehasTagRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagArticleCounselor provides a mock function with given fields: ctx, articleID, request
func (_m *ArticleService) AddTagArticleCounselor(ctx echo.Context, articleID int, request requests.ArticlehasTagRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, articleID, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticlehasTagRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, articleID, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticlehasTagRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, articleID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.ArticlehasTagRequest) error); ok {
		r1 = rf(ctx, articleID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArticle provides a mock function with given fields: ctx, request, thumbnail
func (_m *ArticleService) CreateArticle(ctx echo.Context, request requests.ArticleRequest, thumbnail *multipart.FileHeader) (*domain.Articles, []exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, thumbnail)

	var r0 *domain.Articles
	var r1 []exceptions.ValidationMessage
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) (*domain.Articles, []exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, thumbnail)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) *domain.Articles); ok {
		r0 = rf(ctx, request, thumbnail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Articles)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r1 = rf(ctx, request, thumbnail)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) error); ok {
		r2 = rf(ctx, request, thumbnail)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteArticle provides a mock function with given fields: ctx
func (_m *ArticleService) DeleteArticle(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteArticleCounselor provides a mock function with given fields: ctx
func (_m *ArticleService) DeleteArticleCounselor(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllArticle provides a mock function with given fields: ctx
func (_m *ArticleService) FindAllArticle(ctx echo.Context) ([]domain.Articles, *query.Pagination, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Articles
	var r1 *query.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]domain.Articles, *query.Pagination, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []domain.Articles); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Articles)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) *query.Pagination); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*query.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(echo.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindAllArticleCounselor provides a mock function with given fields: ctx
func (_m *ArticleService) FindAllArticleCounselor(ctx echo.Context) (*resources.ArticleCounseloResource, error) {
	ret := _m.Called(ctx)

	var r0 *resources.ArticleCounseloResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.ArticleCounseloResource, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.ArticleCounseloResource); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.ArticleCounseloResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllArticleUser provides a mock function with given fields:
func (_m *ArticleService) FindAllArticleUser() ([]resources.ArticleResource, error) {
	ret := _m.Called()

	var r0 []resources.ArticleResource
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]resources.ArticleResource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []resources.ArticleResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resources.ArticleResource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindArticleBySlug provides a mock function with given fields: ctx, slug
func (_m *ArticleService) FindArticleBySlug(ctx echo.Context, slug string) (*domain.Articles, error) {
	ret := _m.Called(ctx, slug)

	var r0 *domain.Articles
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.Articles, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.Articles); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Articles)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindArticleForUserBySlug provides a mock function with given fields: ctx, slug
func (_m *ArticleService) FindArticleForUserBySlug(ctx echo.Context, slug string) (*domain.Articles, error) {
	ret := _m.Called(ctx, slug)

	var r0 *domain.Articles
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.Articles, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.Articles); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Articles)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestArticle provides a mock function with given fields:
func (_m *ArticleService) GetLatestArticle() (*resources.ArticleResource, error) {
	ret := _m.Called()

	var r0 *resources.ArticleResource
	var r1 error
	if rf, ok := ret.Get(0).(func() (*resources.ArticleResource, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *resources.ArticleResource); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.ArticleResource)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagArticle provides a mock function with given fields: ctx, id, request
func (_m *ArticleService) RemoveTagArticle(ctx echo.Context, id int, request requests.ArticleHasManyRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, id, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticleHasManyRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, id, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticleHasManyRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, id, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.ArticleHasManyRequest) error); ok {
		r1 = rf(ctx, id, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagArticleCounselor provides a mock function with given fields: ctx, articleID, request
func (_m *ArticleService) RemoveTagArticleCounselor(ctx echo.Context, articleID int, request requests.ArticleHasManyRequest) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, articleID, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticleHasManyRequest) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, articleID, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, requests.ArticleHasManyRequest) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, articleID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, requests.ArticleHasManyRequest) error); ok {
		r1 = rf(ctx, articleID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticle provides a mock function with given fields: ctx, request, thumbnail
func (_m *ArticleService) UpdateArticle(ctx echo.Context, request requests.ArticleRequest, thumbnail *multipart.FileHeader) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request, thumbnail)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request, thumbnail)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, request, thumbnail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.ArticleRequest, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, request, thumbnail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublishedArticle provides a mock function with given fields: ctx, request
func (_m *ArticleService) UpdatePublishedArticle(ctx echo.Context, request requests.PublishArticle) ([]exceptions.ValidationMessage, error) {
	ret := _m.Called(ctx, request)

	var r0 []exceptions.ValidationMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, requests.PublishArticle) ([]exceptions.ValidationMessage, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, requests.PublishArticle) []exceptions.ValidationMessage); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]exceptions.ValidationMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, requests.PublishArticle) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleService creates a new instance of ArticleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleService {
	mock := &ArticleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
