// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// CounselingPackageRepository is an autogenerated mock type for the CounselingPackageRepository type
type CounselingPackageRepository struct {
	mock.Mock
}

// CreatePackage provides a mock function with given fields: pack
func (_m *CounselingPackageRepository) CreatePackage(pack *domain.CounselingPackage) (*domain.CounselingPackage, error) {
	ret := _m.Called(pack)

	var r0 *domain.CounselingPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.CounselingPackage) (*domain.CounselingPackage, error)); ok {
		return rf(pack)
	}
	if rf, ok := ret.Get(0).(func(*domain.CounselingPackage) *domain.CounselingPackage); ok {
		r0 = rf(pack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CounselingPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CounselingPackage) error); ok {
		r1 = rf(pack)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackageById provides a mock function with given fields: id
func (_m *CounselingPackageRepository) DeletePackageById(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: id
func (_m *CounselingPackageRepository) FindById(id int) (*domain.CounselingPackage, error) {
	ret := _m.Called(id)

	var r0 *domain.CounselingPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.CounselingPackage, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.CounselingPackage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CounselingPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: title
func (_m *CounselingPackageRepository) FindByTitle(title string) ([]domain.CounselingPackage, error) {
	ret := _m.Called(title)

	var r0 []domain.CounselingPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.CounselingPackage, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.CounselingPackage); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CounselingPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPackage provides a mock function with given fields:
func (_m *CounselingPackageRepository) GetAllPackage() ([]domain.CounselingPackage, error) {
	ret := _m.Called()

	var r0 []domain.CounselingPackage
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.CounselingPackage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.CounselingPackage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CounselingPackage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: id, cpackage
func (_m *CounselingPackageRepository) UpdatePackage(id int, cpackage *domain.CounselingPackage) error {
	ret := _m.Called(id, cpackage)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.CounselingPackage) error); ok {
		r0 = rf(id, cpackage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCounselingPackageRepository creates a new instance of CounselingPackageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselingPackageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselingPackageRepository {
	mock := &CounselingPackageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
