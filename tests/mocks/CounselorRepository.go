// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// CounselorRepository is an autogenerated mock type for the CounselorRepository type
type CounselorRepository struct {
	mock.Mock
}

// CreateCounselor provides a mock function with given fields: counselor
func (_m *CounselorRepository) CreateCounselor(counselor *domain.Counselors) (*domain.Counselors, error) {
	ret := _m.Called(counselor)

	var r0 *domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Counselors) (*domain.Counselors, error)); ok {
		return rf(counselor)
	}
	if rf, ok := ret.Get(0).(func(*domain.Counselors) *domain.Counselors); ok {
		r0 = rf(counselor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Counselors) error); ok {
		r1 = rf(counselor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllCounselors provides a mock function with given fields: search, filter
func (_m *CounselorRepository) FindAllCounselors(search string, filter []string) ([]domain.Counselors, error) {
	ret := _m.Called(search, filter)

	var r0 []domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]domain.Counselors, error)); ok {
		return rf(search, filter)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []domain.Counselors); ok {
		r0 = rf(search, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(search, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *CounselorRepository) FindById(id int) (*domain.Counselors, error) {
	ret := _m.Called(id)

	var r0 *domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*domain.Counselors, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *domain.Counselors); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCounselorAndGetOneOfSchedule provides a mock function with given fields: id, day
func (_m *CounselorRepository) FindCounselorAndGetOneOfSchedule(id int, day string) (*domain.Counselors, error) {
	ret := _m.Called(id, day)

	var r0 *domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) (*domain.Counselors, error)); ok {
		return rf(id, day)
	}
	if rf, ok := ret.Get(0).(func(int, string) *domain.Counselors); ok {
		r0 = rf(id, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindyByEmail provides a mock function with given fields: email
func (_m *CounselorRepository) FindyByEmail(email string) (*domain.Counselors, error) {
	ret := _m.Called(email)

	var r0 *domain.Counselors
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Counselors, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Counselors); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Counselors)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCounselor provides a mock function with given fields: counselor
func (_m *CounselorRepository) UpdateCounselor(counselor *domain.Counselors) error {
	ret := _m.Called(counselor)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Counselors) error); ok {
		r0 = rf(counselor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCounselorRepository creates a new instance of CounselorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselorRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselorRepository {
	mock := &CounselorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
