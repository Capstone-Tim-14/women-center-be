// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	resources "woman-center-be/internal/web/resources/v1"
)

// CounselingSessionService is an autogenerated mock type for the CounselingSessionService type
type CounselingSessionService struct {
	mock.Mock
}

// GetCounselingSessionDetail provides a mock function with given fields: _a0
func (_m *CounselingSessionService) GetCounselingSessionDetail(_a0 echo.Context) (*resources.CounselingSessionDetailResource, error) {
	ret := _m.Called(_a0)

	var r0 *resources.CounselingSessionDetailResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*resources.CounselingSessionDetailResource, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *resources.CounselingSessionDetailResource); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resources.CounselingSessionDetailResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListCounselingSession provides a mock function with given fields: _a0
func (_m *CounselingSessionService) GetListCounselingSession(_a0 echo.Context) ([]resources.CounselingSessioningResource, error) {
	ret := _m.Called(_a0)

	var r0 []resources.CounselingSessioningResource
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) ([]resources.CounselingSessioningResource, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) []resources.CounselingSessioningResource); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resources.CounselingSessioningResource)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCounselingSessionService creates a new instance of CounselingSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselingSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselingSessionService {
	mock := &CounselingSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
