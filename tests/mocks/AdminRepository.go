// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "woman-center-be/internal/app/v1/models/domain"

	mock "github.com/stretchr/testify/mock"
)

// AdminRepository is an autogenerated mock type for the AdminRepository type
type AdminRepository struct {
	mock.Mock
}

// CreateAdmin provides a mock function with given fields: admin
func (_m *AdminRepository) CreateAdmin(admin *domain.Admin) (*domain.Admin, error) {
	ret := _m.Called(admin)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Admin) (*domain.Admin, error)); ok {
		return rf(admin)
	}
	if rf, ok := ret.Get(0).(func(*domain.Admin) *domain.Admin); ok {
		r0 = rf(admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Admin) error); ok {
		r1 = rf(admin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindyByEmail provides a mock function with given fields: email
func (_m *AdminRepository) FindyByEmail(email string) (*domain.Admin, error) {
	ret := _m.Called(email)

	var r0 *domain.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Admin, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Admin); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Admin)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminRepository creates a new instance of AdminRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminRepository {
	mock := &AdminRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
